<?php

namespace Models;

use App\Models\Payment;
use App\Models\User;
use Tests\TestCase;

class UserPaymentSubtypeTest extends TestCase
{
    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub
        \Artisan::call('db:truncate');
    }

    public function test_calculate_payment_subtype_returns_minus_one_if_user_is_disabled()
    {
        $user = User::factory()->create(['is_disabled' => true]);

        $this->assertEquals(-1, $user->calculatePaymentSubType());
    }

    public function test_calculate_payment_subtype_returns_monthly_if_no_payments_exist()
    {
        $user = User::factory()->create(['is_disabled' => false]);

        $this->assertEquals(Payment::SUBTYPE_MONTHLY, $user->calculatePaymentSubType());
    }

    public function test_calculate_payment_subtype_returns_monthly_if_monthly_failed_not_exist()
    {
        $user = User::factory()->create(['is_disabled' => false]);

        // Создаем успешный платеж для SUBTYPE_MONTHLY
        Payment::factory()->create([
            'user_id' => $user->id,
            'subtype' => Payment::SUBTYPE_MONTHLY,
            'status' => Payment::STATUS_PAYED,
        ]);

        $this->assertEquals(Payment::SUBTYPE_MONTHLY, $user->calculatePaymentSubType());
    }

    public function test_calculate_payment_subtype_returns_weekly_if_monthly_failed_exists()
    {
        $user = User::factory()->create(['is_disabled' => false]);

        // Создаем неудачный платеж для SUBTYPE_MONTHLY
        Payment::factory()->create([
            'user_id' => $user->id,
            'subtype' => Payment::SUBTYPE_MONTHLY,
            'status' => Payment::STATUS_DECLINED,
        ]);

        $this->assertEquals(Payment::SUBTYPE_WEEKLY, $user->calculatePaymentSubType());
    }
}
